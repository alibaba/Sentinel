/*
 * Copyright 1999-2022 Alibaba Group Holding Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.alibaba.csp.sentinel.adapter.jdbc;

import com.alibaba.csp.sentinel.adapter.jdbc.delegate.StatementDelegate;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * @author icodening
 * @date 2022.02.09
 */
public class SentinelJDBCStatement extends StatementDelegate {

    public SentinelJDBCStatement(Statement delegate) {
        super(delegate);
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        setSQL(sql);
        return sentinelEntryInternal(() -> super.executeQuery(sql), true);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        setSQL(sql);
        return sentinelEntryInternal(() -> super.executeUpdate(sql), true);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        setSQL(sql);
        return sentinelEntryInternal(() -> super.execute(sql), true);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        setSQL(sql);
        return sentinelEntryInternal(() -> super.executeUpdate(sql, autoGeneratedKeys), true);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        setSQL(sql);
        return sentinelEntryInternal(() -> super.executeUpdate(sql, columnIndexes), true);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        setSQL(sql);
        return sentinelEntryInternal(() -> super.executeUpdate(sql, columnNames), true);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        setSQL(sql);
        return sentinelEntryInternal(() -> super.execute(sql, autoGeneratedKeys), true);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        setSQL(sql);
        return sentinelEntryInternal(() -> super.execute(sql, columnIndexes), true);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        setSQL(sql);
        return sentinelEntryInternal(() -> super.execute(sql, columnNames), true);
    }

    @Override
    public long[] executeLargeBatch() throws SQLException {
        return sentinelEntryInternal(super::executeLargeBatch, true);
    }

    @Override
    public long executeLargeUpdate(String sql) throws SQLException {
        setSQL(sql);
        return sentinelEntryInternal(() -> super.executeLargeUpdate(sql), true);
    }

    @Override
    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        setSQL(sql);
        return sentinelEntryInternal(() -> super.executeLargeUpdate(sql, autoGeneratedKeys), true);
    }

    @Override
    public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
        setSQL(sql);
        return sentinelEntryInternal(() -> super.executeLargeUpdate(sql, columnIndexes), true);
    }

    @Override
    public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
        setSQL(sql);
        return sentinelEntryInternal(() -> super.executeLargeUpdate(sql, columnNames), true);
    }
}
